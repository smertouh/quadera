
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gettingstarted/gallery/auto_examples/analysis/plot_efa_keller_massart.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gettingstarted_gallery_auto_examples_analysis_plot_efa_keller_massart.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gettingstarted_gallery_auto_examples_analysis_plot_efa_keller_massart.py:


EFA analysis (Keller and Massart original example)
===================================================

In this example, we perform the Evolving Factor Analysis of a TEST dataset
(ref. Keller and Massart, Chemometrics and Intelligent Laboratory Systems,
12 (1992) 209-224 )

.. GENERATED FROM PYTHON SOURCE LINES 16-21

.. code-block:: default

    import spectrochempy as scp
    import numpy as np

    # sphinx_gallery_thumbnail_number = 5








.. GENERATED FROM PYTHON SOURCE LINES 22-26

Generate a test dataset
------------------------------------------------------------------
1) simulated chromatogram
*************************

.. GENERATED FROM PYTHON SOURCE LINES 26-36

.. code-block:: default


    t = scp.Coord(np.arange(15), units="minutes", title="time")  # time coordinates
    c = scp.Coord(range(2), title="components")  # component coordinates

    data = np.zeros((2, 15), dtype=np.float64)
    data[0, 3:8] = [1, 3, 6, 3, 1]  # compound 1
    data[1, 5:11] = [1, 3, 5, 3, 1, 0.5]  # compound 2

    dsc = scp.NDDataset(data=data, coords=[c, t])








.. GENERATED FROM PYTHON SOURCE LINES 37-39

2) absorption spectra
**********************

.. GENERATED FROM PYTHON SOURCE LINES 39-45

.. code-block:: default


    spec = np.array([[2.0, 3.0, 4.0, 2.0], [3.0, 4.0, 2.0, 1.0]])
    w = scp.Coord(np.arange(1, 5, 1), units="nm", title="wavelength")

    dss = scp.NDDataset(data=spec, coords=[c, w])








.. GENERATED FROM PYTHON SOURCE LINES 46-48

3) simulated data matrix
************************

.. GENERATED FROM PYTHON SOURCE LINES 48-55

.. code-block:: default


    dataset = scp.dot(dsc.T, dss)
    dataset.data = np.random.normal(dataset.data, 0.2)
    dataset.title = "intensity"

    dataset.plot()




.. image-sg:: /gettingstarted/gallery/auto_examples/analysis/images/sphx_glr_plot_efa_keller_massart_001.png
   :alt: plot efa keller massart
   :srcset: /gettingstarted/gallery/auto_examples/analysis/images/sphx_glr_plot_efa_keller_massart_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <_AxesSubplot:xlabel='values $\\mathrm{}$', ylabel='intensity $\\mathrm{}$'>



.. GENERATED FROM PYTHON SOURCE LINES 56-58

4) evolving factor analysis (EFA)
*********************************

.. GENERATED FROM PYTHON SOURCE LINES 58-61

.. code-block:: default


    efa = scp.EFA(dataset)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Evolving Factor Analysis: 0%     Evolving Factor Analysis: 3%     Evolving Factor Analysis: 6%     Evolving Factor Analysis: 10%     Evolving Factor Analysis: 13%     Evolving Factor Analysis: 16%     Evolving Factor Analysis: 20%     Evolving Factor Analysis: 23%     Evolving Factor Analysis: 26%     Evolving Factor Analysis: 30%     Evolving Factor Analysis: 33%     Evolving Factor Analysis: 36%     Evolving Factor Analysis: 40%     Evolving Factor Analysis: 43%     Evolving Factor Analysis: 46%     Evolving Factor Analysis: 53 %     Evolving Factor Analysis: 56 %     Evolving Factor Analysis: 60 %     Evolving Factor Analysis: 63 %     Evolving Factor Analysis: 66 %     Evolving Factor Analysis: 70 %     Evolving Factor Analysis: 73 %     Evolving Factor Analysis: 76 %     Evolving Factor Analysis: 80 %     Evolving Factor Analysis: 83 %     Evolving Factor Analysis: 86 %     Evolving Factor Analysis: 90 %     Evolving Factor Analysis: 93 %     Evolving Factor Analysis: 96 %     Evolving Factor Analysis: 100 % 



.. GENERATED FROM PYTHON SOURCE LINES 62-64

Plots of the log(EV) for the forward and backward analysis


.. GENERATED FROM PYTHON SOURCE LINES 64-69

.. code-block:: default


    efa.f_ev.T.plot(yscale="log", legend=efa.f_ev.y.labels)

    efa.b_ev.T.plot(yscale="log")




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /gettingstarted/gallery/auto_examples/analysis/images/sphx_glr_plot_efa_keller_massart_002.png
         :alt: plot efa keller massart
         :srcset: /gettingstarted/gallery/auto_examples/analysis/images/sphx_glr_plot_efa_keller_massart_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /gettingstarted/gallery/auto_examples/analysis/images/sphx_glr_plot_efa_keller_massart_003.png
         :alt: plot efa keller massart
         :srcset: /gettingstarted/gallery/auto_examples/analysis/images/sphx_glr_plot_efa_keller_massart_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <_AxesSubplot:xlabel='values $\\mathrm{}$', ylabel='EigenValues $\\mathrm{}$'>



.. GENERATED FROM PYTHON SOURCE LINES 70-75

Looking at these EFA curves, it is quite obvious that only two components
are really significant, and this corresponds to the data that we have in
input.
We can consider that the third EFA components is mainly due to the noise,
and so we can use it to set a cut of values

.. GENERATED FROM PYTHON SOURCE LINES 75-89

.. code-block:: default


    n_pc = 2
    efa.cutoff = np.max(efa.f_ev[:, n_pc].data)

    f2 = efa.f_ev
    b2 = efa.b_ev

    # we concatenate the datasets to plot them in a single figure
    both = scp.concatenate(f2, b2)
    both.T.plot(yscale="log")

    # TODO: add "legend" keyword in NDDataset.plot()





.. image-sg:: /gettingstarted/gallery/auto_examples/analysis/images/sphx_glr_plot_efa_keller_massart_004.png
   :alt: plot efa keller massart
   :srcset: /gettingstarted/gallery/auto_examples/analysis/images/sphx_glr_plot_efa_keller_massart_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <_AxesSubplot:xlabel='values $\\mathrm{}$', ylabel='EigenValues $\\mathrm{}$'>



.. GENERATED FROM PYTHON SOURCE LINES 90-92

Get the abstract concentration profile based on the FIFO EFA analysis


.. GENERATED FROM PYTHON SOURCE LINES 92-97

.. code-block:: default

    efa.cutoff = None
    c = efa.get_conc(n_pc)
    c.T.plot()

    # scp.show()  # uncomment to show plot if needed (not necessary in jupyter notebook)



.. image-sg:: /gettingstarted/gallery/auto_examples/analysis/images/sphx_glr_plot_efa_keller_massart_005.png
   :alt: plot efa keller massart
   :srcset: /gettingstarted/gallery/auto_examples/analysis/images/sphx_glr_plot_efa_keller_massart_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <_AxesSubplot:xlabel='values $\\mathrm{}$', ylabel='relative concentration $\\mathrm{}$'>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.457 seconds)


.. _sphx_glr_download_gettingstarted_gallery_auto_examples_analysis_plot_efa_keller_massart.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_efa_keller_massart.py <plot_efa_keller_massart.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_efa_keller_massart.ipynb <plot_efa_keller_massart.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
