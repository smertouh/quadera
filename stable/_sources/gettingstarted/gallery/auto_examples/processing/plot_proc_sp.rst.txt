.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gettingstarted_gallery_auto_examples_processing_plot_proc_sp.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_gettingstarted_gallery_auto_examples_processing_plot_proc_sp.py:


Sine bell and squared Sine bell window multiplication
=====================================================

In this example, we use sine bell or squared sine bell window multiplication to apodize a NMR signal in the time domain.


.. code-block:: default


    import spectrochempy as scp
    import os


    path = os.path.join(
        scp.preferences.datadir, "nmrdata", "bruker", "tests", "nmr", "topspin_1d"
    )
    dataset1D = scp.read_topspin(path, expno=1, remove_digital_filter=True)








Normalize the dataset values and reduce the time domain


.. code-block:: default


    dataset1D /= dataset1D.real.data.max()  # normalize
    dataset1D = dataset1D[0.0:15000.0]








Apply Sine bell window apodization with parameter ssb=2, which correspond to a cosine function


.. code-block:: default


    new1, curve1 = scp.sinm(dataset1D, ssb=2, retapod=True, inplace=False)

    # this is equivalent to
    _ = dataset1D.sinm(ssb=2, retapod=True, inplace=False)

    # or also
    _ = scp.sp(dataset1D, ssb=2, pow=1, retapod=True, inplace=False)








Apply Sine bell window apodization with parameter ssb=2, which correspond to a sine function


.. code-block:: default


    new2, curve2 = dataset1D.sinm(ssb=1, retapod=True, inplace=False)








Apply Squared Sine bell window apodization with parameter ssb=1 and ssb=2


.. code-block:: default


    new3, curve3 = scp.qsin(dataset1D, ssb=2, retapod=True, inplace=False)

    new4, curve4 = dataset1D.qsin(ssb=1, retapod=True, inplace=False)








Apply shifted Sine bell window apodization with parameter ssb=8 (mixed sine/cosine window)


.. code-block:: default


    new5, curve5 = dataset1D.sinm(ssb=8, retapod=True, inplace=False)








Plotting


.. code-block:: default


    p = dataset1D.plot(zlim=(-2, 2), color="k")

    curve1.plot(color="r", clear=False)
    new1.plot(
        data_only=True, color="r", clear=False, label=" sinm with ssb= 2 (cosine window)"
    )

    curve2.plot(color="b", clear=False)
    new2.plot(
        data_only=True, color="b", clear=False, label=" sinm with ssb= 1 (sine window)"
    )

    curve3.plot(color="m", clear=False)
    new3.plot(data_only=True, color="m", clear=False, label=" qsin with ssb= 2")

    curve4.plot(color="g", clear=False)
    new4.plot(data_only=True, color="g", clear=False, label=" qsin with ssb= 1")

    curve5.plot(color="c", ls="--", clear=False)
    new5.plot(
        data_only=True,
        color="c",
        ls="--",
        clear=False,
        label=" sinm with ssb= 8",
        legend="best",
    )

    # scp.show()  # uncomment to show plot if needed (not necessary in jupyter notebook)



.. image:: /gettingstarted/gallery/auto_examples/processing/images/sphx_glr_plot_proc_sp_001.png
    :alt: plot proc sp
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <_AxesSubplot:xlabel='F1 acquisition time $\\mathrm{/\\ \\mathrm{Âµs}}$', ylabel='values $\\mathrm{}$'>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.724 seconds)


.. _sphx_glr_download_gettingstarted_gallery_auto_examples_processing_plot_proc_sp.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_proc_sp.py <plot_proc_sp.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_proc_sp.ipynb <plot_proc_sp.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
