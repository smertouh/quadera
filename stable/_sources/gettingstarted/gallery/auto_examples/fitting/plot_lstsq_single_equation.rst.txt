.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gettingstarted_gallery_auto_examples_fitting_plot_lstsq_single_equation.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_gettingstarted_gallery_auto_examples_fitting_plot_lstsq_single_equation.py:


Solve a linear equation using LSTSQ
-----------------------------------
In this example, we find the least  square solution of a simple linear
equation.


.. code-block:: default

    # sphinx_gallery_thumbnail_number = 2

    import spectrochempy as scp








Let's take a similar example to the one given in the `numpy.linalg`
documentation

We have some noisy data that represent the distance `d` traveled by some
objects versus time `t`:


.. code-block:: default


    t = scp.NDDataset(data=[0, 1, 2, 3], title="time", units="hour")

    d = scp.NDDataset(
        data=[-1, 0.2, 0.9, 2.1], coordset=[t], title="distance", units="kilometer"
    )








Here is a plot of these data-points:


.. code-block:: default


    d.plot_scatter(markersize=7, mfc="red")




.. image:: /gettingstarted/gallery/auto_examples/fitting/images/sphx_glr_plot_lstsq_single_equation_001.png
    :alt: plot lstsq single equation
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <_AxesSubplot:xlabel='time $\\mathrm{/\\ \\mathrm{hr}}$', ylabel='distance $\\mathrm{/\\ \\mathrm{km}}$'>



We want to fit a line through these data-points of equation

.. math::

   d = v.t + d_0

By examining the coefficients, we see that the line should have a
gradient of roughly 1 km/h and cut the y-axis at, more or less, -1 km.

Using LSTSQ, the solution is found very easily:


.. code-block:: default


    lst = scp.LSTSQ(t, d)

    v, d0 = lst.transform()
    print("speed : {:.3fK},  d0 : {:.3fK}".format(v, d0))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    speed : 1.000 km.hr^-1,  d0 : -0.950 km




Final plot


.. code-block:: default


    d.plot_scatter(
        markersize=10,
        mfc="red",
        mec="black",
        label="Original data",
        suptitle="Least-square fitting " "example",
    )
    dfit = lst.inverse_transform()

    dfit.plot_pen(clear=False, color="g", label="Fitted line", legend=True)




.. image:: /gettingstarted/gallery/auto_examples/fitting/images/sphx_glr_plot_lstsq_single_equation_002.png
    :alt: plot lstsq single equation
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <_AxesSubplot:xlabel='time $\\mathrm{/\\ \\mathrm{hr}}$', ylabel='distance $\\mathrm{/\\ \\mathrm{km}}$'>



Note: The same result can be obtained directly using `d` as a single
parameter on LSTSQ (as `t` is the `x` coordinate axis!)


.. code-block:: default


    lst = scp.LSTSQ(d)

    v, d0 = lst.transform()
    print("speed : {:.3fK},  d0 : {:.3fK}".format(v, d0))

    # scp.show()  # uncomment to show plot if needed (not necessary in jupyter notebook)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    speed : 1.000 km.hr^-1,  d0 : -0.950 km





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.285 seconds)


.. _sphx_glr_download_gettingstarted_gallery_auto_examples_fitting_plot_lstsq_single_equation.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_lstsq_single_equation.py <plot_lstsq_single_equation.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_lstsq_single_equation.ipynb <plot_lstsq_single_equation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
