.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gettingstarted_gallery_auto_examples_project_plot_project.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_gettingstarted_gallery_auto_examples_project_plot_project.py:


Project creation
=======================================

In this example, we create a Project from scratch


.. code-block:: default

    import spectrochempy as scp








Let's assume we have three subproject to group in a single project


.. code-block:: default


    proj = scp.Project(
        # subprojects
        scp.Project(name="P350", label=r"$\mathrm{M_P}\,(623\,K)$"),
        scp.Project(name="A350", label=r"$\mathrm{M_A}\,(623\,K)$"),
        scp.Project(name="B350", label=r"$\mathrm{M_B}\,(623\,K)$"),
        # attributes
        name="project_1",
        label="main project",
    )

    assert proj.projects_names == ["P350", "A350", "B350"]








Add for example two datasets to the ``A350`` subproject.


.. code-block:: default


    ir = scp.NDDataset([1.1, 2.2, 3.3], coords=[[1, 2, 3]])
    print(ir)
    tg = scp.NDDataset([1, 3, 4], coords=[[1, 2, 3]])
    print(tg)
    proj.A350["IR"] = ir
    proj.A350["TG"] = tg





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    NDDataset: [float64] unitless (size: 3)
    NDDataset: [float64] unitless (size: 3)




Members of the project or attributes are easily accessed:


.. code-block:: default


    print(proj.A350)
    print(proj)
    print(proj.A350.label)
    print(proj.A350.TG)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Project A350:
        ⤷ IR (dataset)
        ⤷ TG (dataset)
    Project project_1:
        ⤷ P350 (sub-project)    ⤷ A350 (sub-project)
           ⤷ IR (dataset)
           ⤷ TG (dataset)    ⤷ B350 (sub-project)
    $\mathrm{M_A}\,(623\,K)$
    NDDataset: [float64] unitless (size: 3)




Save this project


.. code-block:: default


    proj.save()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    PosixPath('/home/runner/work/spectrochempy/spectrochempy/docs/gettingstarted/examples/project/project_1.pscp')



RELOAD the project from disk as newproj


.. code-block:: default


    newproj = scp.Project.load("project_1")
    print(newproj)

    assert str(newproj) == str(proj)
    assert newproj.A350.label == proj.A350.label





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Project project_1:
        ⤷ P350 (sub-project)    ⤷ A350 (sub-project)
           ⤷ IR (dataset)
           ⤷ TG (dataset)    ⤷ B350 (sub-project)




Now we add a script to the original proj


.. code-block:: default


    script_source = """
    set_loglevel(INFO)
    info_('samples contained in the project are:%s'%proj.projects_names)
    """

    proj["print_info"] = scp.Script("print_info", script_source)
    print(proj)
    print("*******************************************")




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Project project_1:
        ⤷ P350 (sub-project)    ⤷ A350 (sub-project)
           ⤷ IR (dataset)
           ⤷ TG (dataset)    ⤷ B350 (sub-project)    ⤷ print_info (script)
    *******************************************




save but do not change the original data


.. code-block:: default


    proj.save(overwrite_data=False)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    PosixPath('project_1.pscp')



RELOAD it


.. code-block:: default


    newproj = scp.Project.load("project_1")
    print(newproj)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Project project_1:
        ⤷ P350 (sub-project)    ⤷ A350 (sub-project)
           ⤷ IR (dataset)
           ⤷ TG (dataset)    ⤷ B350 (sub-project)    ⤷ print_info (script)




Execute a script


.. code-block:: default


    scp.run_script(newproj.print_info)








Another way to do the same thing is ith the following syntax (which may
seem simpler


.. code-block:: default


    newproj.print_info()








Finally lets use a more useful script


.. code-block:: default

    script_source_2 = """
    proj.A350.TG.plot_scatter(title='my scatter plot')
    #show()
    """
    proj["tgscatter"] = scp.Script("tgscatter", script_source_2)

    proj.tgscatter()

    # scp.show()  # uncomment to show plot if needed (not necessary in jupyter notebook)



.. image:: /gettingstarted/gallery/auto_examples/project/images/sphx_glr_plot_project_001.png
    :alt: my scatter plot
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.157 seconds)


.. _sphx_glr_download_gettingstarted_gallery_auto_examples_project_plot_project.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_project.py <plot_project.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_project.ipynb <plot_project.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
