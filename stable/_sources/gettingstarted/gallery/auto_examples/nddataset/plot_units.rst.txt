.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gettingstarted_gallery_auto_examples_nddataset_plot_units.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_gettingstarted_gallery_auto_examples_nddataset_plot_units.py:


Units manipulation examples
===========================

In this example, we show how units can be used in SpectroChemPy


.. code-block:: default


    import spectrochempy as scp








Spectrochempy can do calculations with units - it uses [pint](https://pint.readthedocs.io) to define and perform
operation on data with units.

Create quantities
-----------------
To create quantity, use for instance, one of the following expression:


.. code-block:: default


    scp.Quantity("10.0 cm^-1")

    ""
    scp.Quantity(1.0, "cm^-1/hour")






.. only:: builder_html

    .. raw:: html

        1.0 cm<sup>-1</sup>.hr<sup>-1</sup>
        <br />
        <br />

or may be simpler using `ur`:


.. code-block:: default


    ur = scp.ur
    10.0 * ur.meter / ur.gram / ur.volt






.. only:: builder_html

    .. raw:: html

        10.0 m.V<sup>-1</sup>.g<sup>-1</sup>
        <br />
        <br />

`ur` stands for **unit registry**, which handle many type of units (and conversion between them)

Units for dataset
-----------------

When loading experimental dataset using the `read` method, units are generally attributed to coordinates and data


.. code-block:: default


    ds = scp.read("wodger.spg")[0]
    prefs = ds.preferences
    prefs.figure.figsize = (7, 3)
    _ = ds.plot()




.. image:: /gettingstarted/gallery/auto_examples/nddataset/images/sphx_glr_plot_units_001.png
    :alt: plot units
    :class: sphx-glr-single-img





* `wavenumbers` (`x`) coordinates are here expressed in $cm^{-1}$
* and `data` are in absorbance ($a.u.$) units.

Convert between units
----------------------

Here are some examples


.. code-block:: default


    x = 36 * ur("km/hr")
    x.to("cm/s")






.. only:: builder_html

    .. raw:: html

        1000.0 cm.s<sup>-1</sup>
        <br />
        <br />

We can make the conversion *inplace* using *ito* instead of *to*


.. code-block:: default


    x.ito("m/s")
    x






.. only:: builder_html

    .. raw:: html

        10.0 m.s<sup>-1</sup>
        <br />
        <br />

Obviously you cannot convert between incompatible units


.. code-block:: default


    try:
        x.to("hour")
    except scp.DimensionalityError as e:
        scp.error_(e)








This, of course, also applies to NDDataset.
Let's try for the `x` coordinate. It is `wavenumber` in $cm^{-1}$ that can be transformed in $Hz$ for instance:


.. code-block:: default


    ds.x.ito("terahertz")
    _ = ds.plot()




.. image:: /gettingstarted/gallery/auto_examples/nddataset/images/sphx_glr_plot_units_002.png
    :alt: plot units
    :class: sphx-glr-single-img





We can also change the wavenumbers (or frequency units), to energy units or wavelength as
Spectrochempy (thanks to [pint](https://pint.readthedocs.io)) knows how to make the transformation.


.. code-block:: default


    ds.x.ito("eV")
    _ = ds.plot()

    ""
    try:
        ds.x.ito("nanometer")
    except Exception as e:
        scp.error_(e)

    ""
    ds.x = ds.x.to("nanometer")
    _ = ds.plot()
    print(ds.x)  # The LinearCoord object is transformed into a Coord object




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /gettingstarted/gallery/auto_examples/nddataset/images/sphx_glr_plot_units_003.png
          :alt: plot units
          :class: sphx-glr-multi-img

    *

      .. image:: /gettingstarted/gallery/auto_examples/nddataset/images/sphx_glr_plot_units_004.png
          :alt: plot units
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LinearCoord: [float64] nm (size: 5549)




``absorbance`` units (the units of the data) can also be transformed into ``transmittance``


.. code-block:: default


    ds.ito("transmittance")
    _ = ds.plot()

    ""
    ds.ito("absorbance")
    ds.x.ito("cm^-1")
    _ = ds.plot()

    ""
    # scp.show()  # uncomment to show plot if needed (not necessary in jupyter notebook)



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /gettingstarted/gallery/auto_examples/nddataset/images/sphx_glr_plot_units_005.png
          :alt: plot units
          :class: sphx-glr-multi-img

    *

      .. image:: /gettingstarted/gallery/auto_examples/nddataset/images/sphx_glr_plot_units_006.png
          :alt: plot units
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ''




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.037 seconds)


.. _sphx_glr_download_gettingstarted_gallery_auto_examples_nddataset_plot_units.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_units.py <plot_units.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_units.ipynb <plot_units.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
